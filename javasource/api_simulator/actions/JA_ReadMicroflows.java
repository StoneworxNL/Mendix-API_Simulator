// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package api_simulator.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.systemwideinterfaces.core.IDataType.DataTypeEnum;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import api_simulator.proxies.Microflow;
import api_simulator.proxies.Request;
import com.mendix.core.Core;

public class JA_ReadMicroflows extends CustomJavaAction<java.util.List<IMendixObject>>
{
	public JA_ReadMicroflows(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		List<IMendixObject> microflowList = new ArrayList();
		IContext c = getContext();

		for(String mf : Core.getMicroflowNames())
		{			
			Map<String, IDataType> args = Core.getInputParameters(mf);

		
			for (Entry<String, IDataType> entry : args.entrySet()) {
				IDataType type = entry.getValue();
                
				//We only accept microflows with an input parameter of type RequestResponseSimulator.Request to ensure the list stays small and relevant!
				if( type.getType() == DataTypeEnum.Object && type.getObjectType().equals(Request.getType())  ) {
					Microflow flow = Microflow.initialize(c, Core.instantiate(c, Microflow.entityName));
					flow.setName(mf);
					flow.setValue1(type.getObjectType());
					flow.setValue2(Request.getType());
					microflowList.add(flow.getMendixObject());
							
                    break;
                }
				//we only expect 1 input parameter of the intended entity, nothing else!
                else {
                    break;
                }
			}	

		}
		
		return microflowList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_ReadMicroflows";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
